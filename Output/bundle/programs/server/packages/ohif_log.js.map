{"version":3,"sources":["meteor://ðŸ’»app/packages/ohif:log/main.js"],"names":["Meteor","module","watch","require","v","OHIF","loglevel","default","defaultLevel","isProduction","log","getLogger","setLevel","times","Map","time","givenKey","key","set","Date","getTime","timeEnd","now","last","get","delete","duration","info"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,MAAJ;AAAWC,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACH,SAAOI,CAAP,EAAS;AAACJ,aAAOI,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIC,IAAJ;AAASJ,OAAOC,KAAP,CAAaC,QAAQ,kBAAR,CAAb,EAAyC;AAACE,OAAKD,CAAL,EAAO;AAACC,WAAKD,CAAL;AAAO;;AAAhB,CAAzC,EAA2D,CAA3D;AAA8D,IAAIE,QAAJ;AAAaL,OAAOC,KAAP,CAAaC,QAAQ,UAAR,CAAb,EAAiC;AAACI,UAAQH,CAAR,EAAU;AAACE,eAASF,CAAT;AAAW;;AAAvB,CAAjC,EAA0D,CAA1D;AAI9J,MAAMI,eAAeR,OAAOS,YAAP,GAAsB,OAAtB,GAAgC,OAArD,C,CAEA;;AACAJ,KAAKK,GAAL,GAAWJ,SAASK,SAAT,CAAmB,MAAnB,CAAX;AACAN,KAAKK,GAAL,CAASE,QAAT,CAAkBJ,YAAlB,E,CAEA;;AACA,MAAMK,QAAQ,IAAIC,GAAJ,EAAd,C,CAEA;;AACAT,KAAKK,GAAL,CAASK,IAAT,GAAgBC,YAAY;AACxB,QAAMC,MAAM,OAAOD,QAAP,KAAoB,WAApB,GAAkC,SAAlC,GAA8CA,QAA1D;AACAH,QAAMK,GAAN,CAAUD,GAAV,EAAe,IAAIE,IAAJ,GAAWC,OAAX,EAAf;AACH,CAHD,C,CAKA;;;AACAf,KAAKK,GAAL,CAASW,OAAT,GAAmBL,YAAY;AAC3B,QAAMC,MAAM,OAAOD,QAAP,KAAoB,WAApB,GAAkC,SAAlC,GAA8CA,QAA1D;AACA,QAAMM,MAAM,IAAIH,IAAJ,GAAWC,OAAX,EAAZ;AACA,QAAMG,OAAOV,MAAMW,GAAN,CAAUP,GAAV,KAAkBK,GAA/B;AACAT,QAAMY,MAAN,CAAaR,GAAb;AACA,QAAMS,WAAWJ,MAAMC,IAAvB;AACAlB,OAAKK,GAAL,CAASiB,IAAT,CAAe,GAAEV,GAAI,KAAIS,QAAS,IAAlC;AACH,CAPD,C","file":"/packages/ohif_log.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\r\nimport { OHIF } from 'meteor/ohif:core';\r\nimport loglevel from 'loglevel';\r\n\r\nconst defaultLevel = Meteor.isProduction ? 'ERROR' : 'TRACE';\r\n\r\n// Create package logger using loglevel\r\nOHIF.log = loglevel.getLogger('OHIF');\r\nOHIF.log.setLevel(defaultLevel);\r\n\r\n// Add time and timeEnd to OHIF.log namespace\r\nconst times = new Map();\r\n\r\n// Register the time method\r\nOHIF.log.time = givenKey => {\r\n    const key = typeof givenKey === 'undefined' ? 'default' : givenKey;\r\n    times.set(key, new Date().getTime());\r\n};\r\n\r\n// Register the timeEnd method\r\nOHIF.log.timeEnd = givenKey => {\r\n    const key = typeof givenKey === 'undefined' ? 'default' : givenKey;\r\n    const now = new Date().getTime();\r\n    const last = times.get(key) || now;\r\n    times.delete(key);\r\n    const duration = now - last;\r\n    OHIF.log.info(`${key}: ${duration}ms`);\r\n};\r\n"]}
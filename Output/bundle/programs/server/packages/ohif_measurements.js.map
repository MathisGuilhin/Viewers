{"version":3,"sources":["meteor://ðŸ’»app/packages/ohif:measurements/both/index.js","meteor://ðŸ’»app/packages/ohif:measurements/both/base.js","meteor://ðŸ’»app/packages/ohif:measurements/both/configuration/index.js","meteor://ðŸ’»app/packages/ohif:measurements/both/configuration/measurements.js","meteor://ðŸ’»app/packages/ohif:measurements/both/configuration/timepoints.js","meteor://ðŸ’»app/packages/ohif:measurements/both/schema/index.js","meteor://ðŸ’»app/packages/ohif:measurements/both/schema/measurements.js","meteor://ðŸ’»app/packages/ohif:measurements/both/schema/timepoints.js"],"names":["module","watch","require","OHIF","v","measurements","Mongo","Tracker","_","cornerstoneTools","configuration","MeasurementApi","setConfiguration","config","extend","getConfiguration","getToolsGroupsMap","toolsGroupsMap","measurementTools","forEach","toolGroup","childTools","tool","id","constructor","timepointApi","toolGroups","tools","changeObserver","Dependency","groupCollection","Collection","_debugName","name","attachSchema","schema","collection","addedHandler","measurement","measurementNumber","timepoint","timepoints","findOne","studyInstanceUids","studyInstanceUid","emptyItem","toolId","$eq","timepointId","update","$set","toolItemId","_id","createdAt","find","$in","count","updateObject","baselineTimepoint","baseline","baselineGroupEntry","found","location","description","insert","changed","changedHandler","removedHandler","nonEmptyItem","$not","groupItems","fetch","groupItem","remove","filter","remainingItems","$gte","operator","$inc","options","multi","childTool","syncMeasurementsAndToolData","observe","added","removed","retrieveMeasurements","patientId","timepointIds","retrievalFn","dataExchange","retrieve","isFunction","Promise","resolve","reject","then","measurementData","log","info","measurementsGroups","Object","keys","measurementTypeId","toolType","push","groupKey","group","sort","a","b","m","storeMeasurements","storeFn","store","concat","timepointFilter","all","map","t","validateMeasurements","validateFn","dataValidation","Function","syncMeasurementAndToolData","sortMeasurements","baselineTimepointId","includedTools","caseProgress","include","deleteMeasurements","entries","length","toolState","globalImageIdSpecificToolStateManager","saveToolState","each","entry","measurementsData","getToolConfiguration","Array","isArray","key","childMeasurement","imagePath","imageId","viewerbase","getImageIdForImagePath","toolData","measurementEntries","data","measurementEntry","findWhere","index","indexOf","splice","restoreToolState","syncFilter","clone","$gt","toolTypes","uniq","getMeasurementById","measurementId","foundGroup","toolGroupId","selector","result","items","item","TimepointSchema","TimepointApi","currentTimepointId","retrieveTimepoints","error","timepointData","query","upsert","catch","reason","storeTimepoints","JSON","stringify","disassociateStudy","disassociateFn","disassociate","removeTimepoint","removeFn","updateTimepoint","updateFn","latestDate","current","lock","locked","prior","$lt","currentAndPrior","comparison","timepointType","nadir","timepointKey","study","contains","visitNumber","followupTimepoints","followupTimepointIds","warn","title","timepointName","currentIndex","i","currentTimepoint","isNumber","states","parenthesis","export","MeasurementSchemaTypes","SimpleSchema","Measurement","additionalData","type","label","defaultValue","optional","blackbox","userId","String","Number","Date","autoValue","isInsert","isUpsert","$setOnInsert","updatedAt","isUpdate","StudyLevelMeasurement","SeriesLevelMeasurement","seriesInstanceUid","CornerstoneVOI","windowWidth","decimal","windowCenter","CornerstoneViewportTranslation","x","y","CornerstoneViewport","scale","translation","voi","invert","Boolean","pixelReplication","hFlip","vFlip","rotation","InstanceLevelMeasurement","sopInstanceUid","viewport","FrameLevelMeasurement","frameIndex","min","CornerstoneToolMeasurement","visible","active","invalidated","CornerstoneHandleBoundingBoxSchema","width","height","left","top","CornerstoneHandleSchema","highlight","drawnIndependently","movesIndependently","allowedOutsideImage","hasMoved","hasBoundingBox","boundingBox","allowedValues","isLocked","earliestDate","studiesData"],"mappings":"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","file":"/packages/ohif_measurements.js","sourcesContent":["import './base.js';\r\nimport './configuration';\r\nimport './schema';\r\n","import { OHIF } from 'meteor/ohif:core';\r\n\r\nOHIF.measurements = {};\r\n","import './measurements.js';\r\nimport './timepoints.js';\r\n","import { Mongo } from 'meteor/mongo';\r\nimport { Tracker } from 'meteor/tracker';\r\nimport { _ } from 'meteor/underscore';\r\nimport { OHIF } from 'meteor/ohif:core';\r\nimport { cornerstoneTools } from 'meteor/ohif:cornerstone';\r\n\r\nlet configuration = {};\r\n\r\nclass MeasurementApi {\r\n    static setConfiguration(config) {\r\n        _.extend(configuration, config);\r\n    }\r\n\r\n    static getConfiguration() {\r\n        return configuration;\r\n    }\r\n\r\n    static getToolsGroupsMap() {\r\n        const toolsGroupsMap = {};\r\n        configuration.measurementTools.forEach(toolGroup => {\r\n            toolGroup.childTools.forEach(tool => (toolsGroupsMap[tool.id] = toolGroup.id));\r\n        });\r\n        return toolsGroupsMap;\r\n    }\r\n\r\n    constructor(timepointApi) {\r\n        if (timepointApi) {\r\n            this.timepointApi = timepointApi;\r\n        }\r\n\r\n        this.toolGroups = {};\r\n        this.tools = {};\r\n        this.toolsGroupsMap = MeasurementApi.getToolsGroupsMap();\r\n        this.changeObserver = new Tracker.Dependency();\r\n\r\n        configuration.measurementTools.forEach(toolGroup => {\r\n            const groupCollection = new Mongo.Collection(null);\r\n            groupCollection._debugName = toolGroup.name;\r\n            groupCollection.attachSchema(toolGroup.schema);\r\n            this.toolGroups[toolGroup.id] = groupCollection;\r\n\r\n            toolGroup.childTools.forEach(tool => {\r\n                const collection = new Mongo.Collection(null);\r\n                collection._debugName = tool.name;\r\n                collection.attachSchema(tool.schema);\r\n                this.tools[tool.id] = collection;\r\n\r\n                const addedHandler = measurement => {\r\n                    let measurementNumber;\r\n\r\n                    // Get the measurement number\r\n                    const timepoint = this.timepointApi.timepoints.findOne({\r\n                        studyInstanceUids: measurement.studyInstanceUid\r\n                    });\r\n\r\n                    // Preventing errors thrown when non-associated (standalone) study is opened...\r\n                    // @TODO: Make sure this logic is correct.\r\n                    if (!timepoint) return;\r\n\r\n                    const emptyItem = groupCollection.findOne({\r\n                        toolId: { $eq: null },\r\n                        timepointId: timepoint.timepointId\r\n                    });\r\n\r\n                    if (emptyItem) {\r\n                        measurementNumber = emptyItem.measurementNumber;\r\n\r\n                        groupCollection.update({\r\n                            timepointId: timepoint.timepointId,\r\n                            measurementNumber\r\n                        }, {\r\n                            $set: {\r\n                                toolId: tool.id,\r\n                                toolItemId: measurement._id,\r\n                                createdAt: measurement.createdAt\r\n                            }\r\n                        });\r\n                    } else {\r\n                        measurementNumber = groupCollection.find({\r\n                            studyInstanceUid: { $in: timepoint.studyInstanceUids }\r\n                        }).count() + 1;\r\n                    }\r\n\r\n                    measurement.measurementNumber = measurementNumber;\r\n\r\n                    // Get the current location/description (if already defined)\r\n                    const updateObject = {\r\n                        timepointId: timepoint.timepointId,\r\n                        measurementNumber\r\n                    };\r\n                    const baselineTimepoint = timepointApi.baseline();\r\n                    const baselineGroupEntry = groupCollection.findOne({\r\n                        timepointId: baselineTimepoint.timepointId\r\n                    });\r\n                    if (baselineGroupEntry) {\r\n                        const tool = this.tools[baselineGroupEntry.toolId];\r\n                        const found = tool.findOne({ measurementNumber });\r\n                        if (found) {\r\n                            updateObject.location = found.location;\r\n                            if (found.description) {\r\n                                updateObject.description = found.description;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Set the timepoint ID, measurement number, location and description\r\n                    collection.update(measurement._id, { $set: updateObject });\r\n\r\n                    if (!emptyItem) {\r\n                        // Reflect the entry in the tool group collection\r\n                        groupCollection.insert({\r\n                            toolId: tool.id,\r\n                            toolItemId: measurement._id,\r\n                            timepointId: timepoint.timepointId,\r\n                            studyInstanceUid: measurement.studyInstanceUid,\r\n                            createdAt: measurement.createdAt,\r\n                            measurementNumber\r\n                        });\r\n                    }\r\n\r\n                    // Enable reactivity\r\n                    this.changeObserver.changed();\r\n                };\r\n\r\n                const changedHandler = measurement => {\r\n                    this.changeObserver.changed();\r\n                };\r\n\r\n                const removedHandler = measurement => {\r\n                    const measurementNumber = measurement.measurementNumber;\r\n\r\n                    groupCollection.update({\r\n                        toolItemId: measurement._id\r\n                    }, {\r\n                        $set: {\r\n                            toolId: null,\r\n                            toolItemId: null\r\n                        }\r\n                    });\r\n\r\n                    const nonEmptyItem = groupCollection.findOne({\r\n                        measurementNumber,\r\n                        toolId: { $not: null }\r\n                    });\r\n\r\n                    if (nonEmptyItem) {\r\n                        return;\r\n                    }\r\n\r\n                    const groupItems = groupCollection.find({ measurementNumber }).fetch();\r\n\r\n                    groupItems.forEach(groupItem => {\r\n                        // Remove the record from the tools group collection too\r\n                        groupCollection.remove({ _id: groupItem._id });\r\n\r\n                        // Update the measurement numbers only if it is last item\r\n                        const timepoint = this.timepointApi.timepoints.findOne({\r\n                            timepointId: groupItem.timepointId\r\n                        });\r\n\r\n                        const filter = {\r\n                            studyInstanceUid: { $in: timepoint.studyInstanceUids },\r\n                            measurementNumber\r\n                        };\r\n\r\n                        const remainingItems = groupCollection.find(filter).count();\r\n                        if (!remainingItems) {\r\n                            filter.measurementNumber = { $gte: measurementNumber };\r\n                            const operator = {\r\n                                $inc: { measurementNumber: -1 }\r\n                            };\r\n                            const options = { multi: true };\r\n                            groupCollection.update(filter, operator, options);\r\n                            toolGroup.childTools.forEach(childTool => {\r\n                                const collection = this.tools[childTool.id];\r\n                                collection.update(filter, operator, options);\r\n                            });\r\n                        }\r\n                    });\r\n\r\n                    // Synchronize the new tool data\r\n                    this.syncMeasurementsAndToolData();\r\n\r\n                    // Enable reactivity\r\n                    this.changeObserver.changed();\r\n                };\r\n\r\n                collection.find().observe({\r\n                    added: addedHandler,\r\n                    changed: changedHandler,\r\n                    removed: removedHandler\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    retrieveMeasurements(patientId, timepointIds) {\r\n        const retrievalFn = configuration.dataExchange.retrieve;\r\n        if (!_.isFunction(retrievalFn)) {\r\n            return;\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            retrievalFn(patientId, timepointIds).then(measurementData => {\r\n\r\n                OHIF.log.info('Measurement data retrieval');\r\n                OHIF.log.info(measurementData);\r\n\r\n                const toolsGroupsMap = MeasurementApi.getToolsGroupsMap();\r\n                const measurementsGroups = {};\r\n\r\n                Object.keys(measurementData).forEach(measurementTypeId => {\r\n                    const measurements = measurementData[measurementTypeId];\r\n\r\n                    measurements.forEach(measurement => {\r\n                        const { toolType } = measurement;\r\n                        if (toolType && this.tools[toolType]) {\r\n                            delete measurement._id;\r\n                            const toolGroup = toolsGroupsMap[toolType];\r\n                            if (!measurementsGroups[toolGroup]) {\r\n                                measurementsGroups[toolGroup] = [];\r\n                            }\r\n\r\n                            measurementsGroups[toolGroup].push(measurement);\r\n                        }\r\n                    });\r\n                });\r\n\r\n                Object.keys(measurementsGroups).forEach(groupKey => {\r\n                    const group = measurementsGroups[groupKey];\r\n                    group.sort((a, b) => {\r\n                        if (a.measurementNumber > b.measurementNumber) {\r\n                            return 1;\r\n                        } else if (a.measurementNumber < b.measurementNumber) {\r\n                            return -1;\r\n                        }\r\n\r\n                        return 0;\r\n                    });\r\n\r\n                    group.forEach(m => this.tools[m.toolType].insert(m));\r\n                });\r\n\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    storeMeasurements(timepointId) {\r\n        const storeFn = configuration.dataExchange.store;\r\n        if (!_.isFunction(storeFn)) {\r\n            return;\r\n        }\r\n\r\n        let measurementData = {};\r\n        configuration.measurementTools.forEach(toolGroup => {\r\n            toolGroup.childTools.forEach(tool => {\r\n                if (!measurementData[toolGroup.id]) {\r\n                    measurementData[toolGroup.id] = [];\r\n                }\r\n\r\n                measurementData[toolGroup.id] = measurementData[toolGroup.id].concat(this.tools[tool.id].find().fetch());\r\n            });\r\n        });\r\n\r\n        const timepointFilter = timepointId ? { timepointId } : {};\r\n        const timepoints = this.timepointApi.all(timepointFilter);\r\n        const timepointIds = timepoints.map(t => t.timepointId);\r\n        const patientId = timepoints[0].patientId;\r\n        const filter = {\r\n            patientId,\r\n            timepointId: {\r\n                $in: timepointIds\r\n            }\r\n        };\r\n\r\n        OHIF.log.info('Saving Measurements for timepoints:', timepoints);\r\n        return storeFn(measurementData, filter).then(() => {\r\n            OHIF.log.info('Measurement storage completed');\r\n        });\r\n    }\r\n\r\n    validateMeasurements() {\r\n        const validateFn = configuration.dataValidation.validateMeasurements;\r\n        if (validateFn && validateFn instanceof Function) {\r\n            validateFn();\r\n        }\r\n    }\r\n\r\n    syncMeasurementsAndToolData() {\r\n        configuration.measurementTools.forEach(toolGroup => {\r\n            toolGroup.childTools.forEach(tool => {\r\n                const measurements = this.tools[tool.id].find().fetch();\r\n                measurements.forEach(measurement => {\r\n                    OHIF.measurements.syncMeasurementAndToolData(measurement);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    sortMeasurements(baselineTimepointId) {\r\n        const tools = configuration.measurementTools;\r\n\r\n        const includedTools = tools.filter(tool => {\r\n            return (tool.options && tool.options.caseProgress && tool.options.caseProgress.include);\r\n        });\r\n\r\n        // Update Measurement the displayed Measurements\r\n        includedTools.forEach(tool => {\r\n            const collection = this.tools[tool.id];\r\n            const measurements = collection.find().fetch();\r\n            measurements.forEach(measurement => {\r\n                OHIF.measurements.syncMeasurementAndToolData(measurement);\r\n            });\r\n        });\r\n    }\r\n\r\n    deleteMeasurements(measurementTypeId, filter) {\r\n        const groupCollection = this.toolGroups[measurementTypeId];\r\n\r\n        // Stop here if it is a temporary toolGroups\r\n        if (!groupCollection) return;\r\n\r\n        // Get the entries information before removing them\r\n        const groupItems = groupCollection.find(filter).fetch();\r\n        const entries = [];\r\n        groupItems.forEach(groupItem => {\r\n            if (!groupItem.toolId) {\r\n                return;\r\n            }\r\n\r\n            const collection = this.tools[groupItem.toolId];\r\n            entries.push(collection.findOne(groupItem.toolItemId));\r\n            collection.remove(groupItem.toolItemId);\r\n        });\r\n\r\n        // Stop here if no entries were found\r\n        if (!entries.length) {\r\n            return;\r\n        }\r\n\r\n        // If the filter doesn't have the measurement number, get it from the first entry\r\n        const measurementNumber = filter.measurementNumber || entries[0].measurementNumber;\r\n\r\n        // Synchronize the new data with cornerstone tools\r\n        const toolState = cornerstoneTools.globalImageIdSpecificToolStateManager.saveToolState();\r\n\r\n        _.each(entries, entry => {\r\n            const measurementsData = [];\r\n            const { tool } = OHIF.measurements.getToolConfiguration(entry.toolType);\r\n            if (Array.isArray(tool.childTools)) {\r\n                tool.childTools.forEach(key => {\r\n                    const childMeasurement = entry[key];\r\n                    if (!childMeasurement) return;\r\n                    measurementsData.push(childMeasurement);\r\n                });\r\n            } else {\r\n                measurementsData.push(entry);\r\n            }\r\n\r\n            measurementsData.forEach(measurementData => {\r\n                const { imagePath, toolType } = measurementData;\r\n                const imageId = OHIF.viewerbase.getImageIdForImagePath(imagePath);\r\n                if (toolState[imageId]) {\r\n                    const toolData = toolState[imageId][toolType];\r\n                    const measurementEntries = toolData && toolData.data;\r\n                    const measurementEntry = _.findWhere(measurementEntries, { _id: entry._id });\r\n                    if (measurementEntry) {\r\n                        const index = measurementEntries.indexOf(measurementEntry);\r\n                        measurementEntries.splice(index, 1);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        cornerstoneTools.globalImageIdSpecificToolStateManager.restoreToolState(toolState);\r\n\r\n        // Synchronize the updated measurements with Cornerstone Tools\r\n        // toolData to make sure the displayed measurements show 'Target X' correctly\r\n        const syncFilter = _.clone(filter);\r\n        delete syncFilter.timepointId;\r\n\r\n        syncFilter.measurementNumber = {\r\n            $gt: measurementNumber - 1\r\n        };\r\n\r\n        const toolTypes = _.uniq(entries.map(entry => entry.toolType));\r\n        toolTypes.forEach(toolType => {\r\n            const collection = this.tools[toolType];\r\n            collection.find(syncFilter).forEach(measurement => {\r\n                OHIF.measurements.syncMeasurementAndToolData(measurement);\r\n            });\r\n        });\r\n    }\r\n\r\n    getMeasurementById(measurementId) {\r\n        let foundGroup;\r\n        _.find(this.toolGroups, toolGroup => {\r\n            foundGroup = toolGroup.findOne({ toolItemId: measurementId });\r\n            return !!foundGroup;\r\n        });\r\n\r\n        // Stop here if no group was found or if the record is a placeholder\r\n        if (!foundGroup || !foundGroup.toolId) {\r\n            return;\r\n        }\r\n\r\n        return this.tools[foundGroup.toolId].findOne(measurementId);\r\n    }\r\n\r\n    fetch(toolGroupId, selector, options) {\r\n        if (!this.toolGroups[toolGroupId]) {\r\n            throw 'MeasurementApi: No Collection with the id: ' + toolGroupId;\r\n        }\r\n\r\n        selector = selector || {};\r\n        options = options || {};\r\n        const result = [];\r\n        const items = this.toolGroups[toolGroupId].find(selector, options).fetch();\r\n        items.forEach(item => {\r\n            if (item.toolId) {\r\n                result.push(this.tools[item.toolId].findOne(item.toolItemId));\r\n            } else {\r\n                result.push({ measurementNumber: item.measurementNumber });\r\n            }\r\n\r\n        });\r\n        return result;\r\n    }\r\n}\r\n\r\nOHIF.measurements.MeasurementApi = MeasurementApi;\r\n","import { Mongo } from 'meteor/mongo';\r\nimport { _ } from 'meteor/underscore';\r\n\r\nimport { OHIF } from 'meteor/ohif:core';\r\n\r\nimport { schema as TimepointSchema } from 'meteor/ohif:measurements/both/schema/timepoints';\r\n\r\nconst configuration = {};\r\n\r\nclass TimepointApi {\r\n    static setConfiguration(config) {\r\n        _.extend(configuration, config);\r\n    }\r\n\r\n    static getConfiguration() {\r\n        return configuration;\r\n    }\r\n\r\n    constructor(currentTimepointId, options={}) {\r\n        if (currentTimepointId) {\r\n            this.currentTimepointId = currentTimepointId;\r\n        }\r\n\r\n        this.options = options;\r\n        this.timepoints = new Mongo.Collection(null);\r\n        this.timepoints.attachSchema(TimepointSchema);\r\n        this.timepoints._debugName = 'Timepoints';\r\n    }\r\n\r\n    retrieveTimepoints(filter) {\r\n        const retrievalFn = configuration.dataExchange.retrieve;\r\n        if (!_.isFunction(retrievalFn)) {\r\n            OHIF.log.error('Timepoint retrieval function has not been configured.');\r\n            return;\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            retrievalFn(filter).then(timepointData => {\r\n                OHIF.log.info('Timepoint data retrieval');\r\n\r\n                _.each(timepointData, timepoint => {\r\n                    delete timepoint._id;\r\n                    const query = {\r\n                        timepointId: timepoint.timepointId\r\n                    };\r\n\r\n                    this.timepoints.update(query, {\r\n                        $set: timepoint\r\n                    }, {\r\n                        upsert: true\r\n                    });\r\n                });\r\n\r\n                resolve();\r\n            }).catch(reason => {\r\n                OHIF.log.error(`Timepoint retrieval function failed: ${reason}`);\r\n                reject(reason);\r\n            });\r\n        });\r\n    }\r\n\r\n    storeTimepoints() {\r\n        const storeFn = configuration.dataExchange.store;\r\n        if (!_.isFunction(storeFn)) {\r\n            return;\r\n        }\r\n\r\n        const timepointData = this.timepoints.find().fetch();\r\n        OHIF.log.info('Preparing to store timepoints');\r\n        OHIF.log.info(JSON.stringify(timepointData, null, 2));\r\n\r\n        storeFn(timepointData).then(() => OHIF.log.info('Timepoint storage completed'));\r\n    }\r\n\r\n    disassociateStudy(timepointIds, studyInstanceUid) {\r\n        const disassociateFn = configuration.dataExchange.disassociate;\r\n        disassociateFn(timepointIds, studyInstanceUid).then(() => {\r\n            OHIF.log.info('Disassociation completed');\r\n\r\n            this.timepoints.remove({});\r\n            this.retrieveTimepoints({});\r\n        });\r\n    }\r\n\r\n    removeTimepoint(timepointId) {\r\n        const removeFn = configuration.dataExchange.remove;\r\n        if (!_.isFunction(removeFn)) {\r\n            return;\r\n        }\r\n\r\n        const timepointData = {\r\n            timepointId\r\n        };\r\n\r\n        OHIF.log.info('Preparing to remove timepoint');\r\n        OHIF.log.info(JSON.stringify(timepointData, null, 2));\r\n\r\n        removeFn(timepointData).then(() => {\r\n            OHIF.log.info('Timepoint removal completed');\r\n            this.timepoints.remove(timepointData);\r\n        });\r\n    }\r\n\r\n    updateTimepoint(timepointId, query) {\r\n        const updateFn = configuration.dataExchange.update;\r\n        if (!_.isFunction(updateFn)) {\r\n            return;\r\n        }\r\n\r\n        const timepointData = {\r\n            timepointId\r\n        };\r\n\r\n        OHIF.log.info('Preparing to update timepoint');\r\n        OHIF.log.info(JSON.stringify(timepointData, null, 2));\r\n        OHIF.log.info(JSON.stringify(query, null, 2));\r\n\r\n        updateFn(timepointData, query).then(() => {\r\n            OHIF.log.info('Timepoint updated completed');\r\n            this.timepoints.update(timepointData, query);\r\n        });\r\n    }\r\n\r\n    // Return all timepoints\r\n    all(filter={}) {\r\n        return this.timepoints.find(filter, {\r\n            sort: {\r\n                latestDate: -1\r\n            },\r\n        }).fetch();\r\n    }\r\n\r\n    // Return only the current timepoint\r\n    current() {\r\n        return this.timepoints.findOne({ timepointId: this.currentTimepointId });\r\n    }\r\n\r\n    lock() {\r\n        const current = this.current();\r\n        if (!current) {\r\n            return;\r\n        }\r\n\r\n        this.timepoints.update(current._id, {\r\n            $set: {\r\n                locked: true\r\n            }\r\n        });\r\n    }\r\n\r\n    // Return the prior timepoint\r\n    prior() {\r\n        const current = this.current();\r\n        if (!current) {\r\n            return;\r\n        }\r\n\r\n        const latestDate = current.latestDate;\r\n        return this.timepoints.findOne({\r\n            latestDate: { $lt: latestDate }\r\n        }, {\r\n            sort: { latestDate: -1 }\r\n        });\r\n    }\r\n\r\n    // Return only the current and prior timepoints\r\n    currentAndPrior() {\r\n        const timepoints = [];\r\n\r\n        const current = this.current();\r\n        if (current) {\r\n            timepoints.push(current);\r\n        }\r\n\r\n        const prior = this.prior();\r\n        if (current && prior && prior._id !== current._id) {\r\n            timepoints.push(prior);\r\n        }\r\n\r\n        return timepoints;\r\n    }\r\n\r\n    // Return only the comparison timepoints\r\n    comparison() {\r\n        return this.currentAndPrior();\r\n    }\r\n\r\n    // Return only the baseline timepoint\r\n    baseline() {\r\n        return this.timepoints.findOne({ timepointType: 'baseline' });\r\n    }\r\n\r\n    // Return only the nadir timepoint\r\n    nadir() {\r\n        const timepoint = this.timepoints.findOne({ timepointKey: 'nadir' });\r\n        return timepoint || this.baseline();\r\n    }\r\n\r\n    // Return only the key timepoints (current, prior, nadir and baseline)\r\n    key(filter={}) {\r\n        const result = [];\r\n\r\n        // Get all the timepoints\r\n        const all = this.all(filter);\r\n\r\n        // Iterate over each timepoint and insert the key ones in the result\r\n        _.each(all, (timepoint, index) => {\r\n            if (index < 2 || index === (all.length - 1)) {\r\n                result.push(timepoint);\r\n            }\r\n        });\r\n\r\n        // Return the resulting timepoints\r\n        return result;\r\n    }\r\n\r\n    // Return only the timepoints for the given study\r\n    study(studyInstanceUid) {\r\n        const result = [];\r\n\r\n        // Iterate over each timepoint and insert the key ones in the result\r\n        _.each(this.all(), (timepoint, index) => {\r\n            if (_.contains(timepoint.studyInstanceUids, studyInstanceUid)) {\r\n                result.push(timepoint);\r\n            }\r\n        });\r\n\r\n        // Return the resulting timepoints\r\n        return result;\r\n    }\r\n\r\n    // Return the timepoint's name\r\n    name(timepoint) {\r\n        // Check if this is a Baseline timepoint, if it is, return 'Baseline'\r\n        if (timepoint.timepointType === 'baseline') {\r\n            return 'Baseline';\r\n        } else if (timepoint.visitNumber) {\r\n            return 'Follow-up ' + timepoint.visitNumber;\r\n        }\r\n\r\n        // Retrieve all of the relevant follow-up timepoints for this patient\r\n        const followupTimepoints = this.timepoints.find({\r\n            patientId: timepoint.patientId,\r\n            timepointType: timepoint.timepointType\r\n        }, {\r\n            sort: {\r\n                latestDate: 1\r\n            }\r\n        });\r\n\r\n        // Create an array of just timepointIds, so we can use indexOf\r\n        // on it to find the current timepoint's relative position\r\n        const followupTimepointIds = followupTimepoints.map(timepoint => timepoint.timepointId);\r\n\r\n        // Calculate the index of the current timepoint in the array of all\r\n        // relevant follow-up timepoints\r\n        const index = followupTimepointIds.indexOf(timepoint.timepointId) + 1;\r\n\r\n        // If index is 0, it means that the current timepoint was not in the list\r\n        // Log a warning and return here\r\n        if (!index) {\r\n            OHIF.log.warn('Current follow-up was not in the list of relevant follow-ups?');\r\n            return;\r\n        }\r\n\r\n        // Return the timepoint name as 'Follow-up N'\r\n        return 'Follow-up ' + index;\r\n    }\r\n\r\n    // Build the timepoint title based on its date\r\n    title(timepoint) {\r\n        const timepointName = this.name(timepoint);\r\n\r\n        const all = _.clone(this.all());\r\n        let index = -1;\r\n        let currentIndex = null;\r\n        for (let i = 0; i < all.length; i++) {\r\n            const currentTimepoint = all[i];\r\n\r\n            // Skip the iterations until we can't find the selected timepoint on study list\r\n            if (this.currentTimepointId === currentTimepoint.timepointId) {\r\n                currentIndex = 0;\r\n            }\r\n\r\n            if (_.isNumber(currentIndex)) {\r\n                index = currentIndex++;\r\n            }\r\n\r\n            // Break the loop if reached the timepoint to get the title\r\n            if (currentTimepoint.timepointId === timepoint.timepointId) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        const states = {\r\n            0: '(Current)',\r\n            1: '(Prior)'\r\n        };\r\n        // TODO: [design] find out how to define the nadir timepoint\r\n        const parenthesis = states[index] || '';\r\n        return `${timepointName} ${parenthesis}`;\r\n    }\r\n\r\n}\r\n\r\nOHIF.measurements.TimepointApi = TimepointApi;\r\n","import './measurements.js';\r\nimport './timepoints.js';\r\n","import { SimpleSchema } from 'meteor/aldeed:simple-schema';\r\n\r\nconst Measurement = new SimpleSchema({\r\n    additionalData: {\r\n        type: Object,\r\n        label: 'Additional Data',\r\n        defaultValue: {},\r\n        optional: true,\r\n        blackbox: true\r\n    },\r\n    userId: {\r\n        type: String,\r\n        label: 'User ID',\r\n        optional: true\r\n    },\r\n    patientId: {\r\n        type: String,\r\n        label: 'Patient ID',\r\n        optional: true\r\n    },\r\n    measurementNumber: {\r\n        type: Number,\r\n        label: 'Measurement Number',\r\n        optional: true\r\n    },\r\n    timepointId: {\r\n        type: String,\r\n        label: 'Timepoint ID',\r\n        optional: true\r\n    },\r\n    // Force value to be current date (on server) upon insert\r\n    // and prevent updates thereafter.\r\n    createdAt: {\r\n        type: Date,\r\n        autoValue: function() {\r\n            if (this.isInsert) {\r\n                return new Date();\r\n            } else if (this.isUpsert) {\r\n                return { $setOnInsert: new Date() };\r\n            } else {\r\n                // [PWV-184] Preventing unset due to child tools updating\r\n                // this.unset(); // Prevent user from supplying their own value\r\n            }\r\n        }\r\n    },\r\n    // Force value to be current date (on server) upon update\r\n    updatedAt: {\r\n        type: Date,\r\n        autoValue: function() {\r\n            if (this.isUpdate) {\r\n                // return new Date();\r\n            }\r\n        },\r\n        optional: true\r\n    }\r\n});\r\n\r\nconst StudyLevelMeasurement = new SimpleSchema([\r\n    Measurement,\r\n    {\r\n        studyInstanceUid: {\r\n            type: String,\r\n            label: 'Study Instance UID'\r\n        }\r\n    }\r\n]);\r\n\r\nconst SeriesLevelMeasurement = new SimpleSchema([\r\n    StudyLevelMeasurement,\r\n    {\r\n        seriesInstanceUid: {\r\n            type: String,\r\n            label: 'Series Instance UID'\r\n        }\r\n    }\r\n]);\r\n\r\nconst CornerstoneVOI = new SimpleSchema({\r\n    windowWidth: {\r\n        type: Number,\r\n        label: 'Window Width',\r\n        decimal: true,\r\n        optional: true\r\n    },\r\n    windowCenter: {\r\n        type: Number,\r\n        label: 'Window Center',\r\n        decimal: true,\r\n        optional: true\r\n    },\r\n});\r\n\r\nconst CornerstoneViewportTranslation = new SimpleSchema({\r\n    x: {\r\n        type: Number,\r\n        label: 'X',\r\n        decimal: true,\r\n        optional: true\r\n    },\r\n    y: {\r\n        type: Number,\r\n        label: 'Y',\r\n        decimal: true,\r\n        optional: true\r\n    },\r\n});\r\n\r\nconst CornerstoneViewport = new SimpleSchema({\r\n    scale: {\r\n        type: Number,\r\n        label: 'Scale',\r\n        decimal: true,\r\n        optional: true\r\n    },\r\n    translation: {\r\n        type: CornerstoneViewportTranslation,\r\n        label: 'Translation',\r\n        optional: true\r\n    },\r\n    voi: {\r\n        type: CornerstoneVOI,\r\n        label: 'VOI',\r\n        optional: true\r\n    },\r\n    invert: {\r\n        type: Boolean,\r\n        label: 'Invert',\r\n        optional: true\r\n    },\r\n    pixelReplication: {\r\n        type: Boolean,\r\n        label: 'Pixel Replication',\r\n        optional: true\r\n    },\r\n    hFlip: {\r\n        type: Boolean,\r\n        label: 'Horizontal Flip',\r\n        optional: true\r\n    },\r\n    vFlip: {\r\n        type: Boolean,\r\n        label: 'Vertical Flip',\r\n        optional: true\r\n    },\r\n    rotation: {\r\n        type: Number,\r\n        label: 'Rotation (degrees)',\r\n        decimal: true,\r\n        optional: true\r\n    }\r\n});\r\n\r\nconst InstanceLevelMeasurement = new SimpleSchema([\r\n    StudyLevelMeasurement,\r\n    SeriesLevelMeasurement,\r\n    {\r\n        sopInstanceUid: {\r\n            type: String,\r\n            label: 'SOP Instance UID'\r\n        },\r\n        viewport: {\r\n            type: CornerstoneViewport,\r\n            label: 'Viewport Parameters',\r\n            optional: true\r\n        }\r\n    }\r\n]);\r\n\r\nconst FrameLevelMeasurement = new SimpleSchema([\r\n    StudyLevelMeasurement,\r\n    SeriesLevelMeasurement,\r\n    InstanceLevelMeasurement,\r\n    {\r\n        frameIndex: {\r\n            type: Number,\r\n            min: 0,\r\n            label: 'Frame index in Instance'\r\n        },\r\n        imagePath: {\r\n            type: String,\r\n            label: 'Identifier for the measurement\\'s image' // studyInstanceUid_seriesInstanceUid_sopInstanceUid_frameIndex\r\n        }\r\n    }\r\n]);\r\n\r\nconst CornerstoneToolMeasurement = new SimpleSchema([\r\n    StudyLevelMeasurement,\r\n    SeriesLevelMeasurement,\r\n    InstanceLevelMeasurement,\r\n    FrameLevelMeasurement,\r\n    {\r\n        toolType: {\r\n            type: String,\r\n            label: 'Cornerstone Tool Type',\r\n            optional: true\r\n        },\r\n        visible: {\r\n            type: Boolean,\r\n            label: 'Visible',\r\n            defaultValue: true\r\n        },\r\n        active: {\r\n            type: Boolean,\r\n            label: 'Active',\r\n            defaultValue: false\r\n        },\r\n        invalidated: {\r\n            type: Boolean,\r\n            label: 'Invalidated',\r\n            defaultValue: false,\r\n            optional: true\r\n        }\r\n    }\r\n]);\r\n\r\nconst CornerstoneHandleBoundingBoxSchema = new SimpleSchema({\r\n    width: {\r\n        type: Number,\r\n        label: 'Width',\r\n        decimal: true\r\n    },\r\n    height: {\r\n        type: Number,\r\n        label: 'Height',\r\n        decimal: true\r\n    },\r\n    left: {\r\n        type: Number,\r\n        label: 'Left',\r\n        decimal: true\r\n    },\r\n    top: {\r\n        type: Number,\r\n        label: 'Top',\r\n        decimal: true\r\n    }\r\n});\r\n\r\nconst CornerstoneHandleSchema = new SimpleSchema({\r\n    x: {\r\n        type: Number,\r\n        label: 'X',\r\n        decimal: true,\r\n        optional: true // Not actually optional, but sometimes values like x/y position are missing\r\n    },\r\n    y: {\r\n        type: Number,\r\n        label: 'Y',\r\n        decimal: true,\r\n        optional: true // Not actually optional, but sometimes values like x/y position are missing\r\n    },\r\n    highlight: {\r\n        type: Boolean,\r\n        label: 'Highlight',\r\n        defaultValue: false\r\n    },\r\n    active: {\r\n        type: Boolean,\r\n        label: 'Active',\r\n        defaultValue: false,\r\n        optional: true\r\n    },\r\n    drawnIndependently: {\r\n        type: Boolean,\r\n        label: 'Drawn Independently',\r\n        defaultValue: false,\r\n        optional: true\r\n    },\r\n    movesIndependently: {\r\n        type: Boolean,\r\n        label: 'Moves Independently',\r\n        defaultValue: false,\r\n        optional: true\r\n    },\r\n    allowedOutsideImage: {\r\n        type: Boolean,\r\n        label: 'Allowed Outside Image',\r\n        defaultValue: false,\r\n        optional: true\r\n    },\r\n    hasMoved: {\r\n        type: Boolean,\r\n        label: 'Has Already Moved',\r\n        defaultValue: false,\r\n        optional: true\r\n    },\r\n    hasBoundingBox: {\r\n        type: Boolean,\r\n        label: 'Has Bounding Box',\r\n        defaultValue: false,\r\n        optional: true\r\n    },\r\n    boundingBox: {\r\n        type: CornerstoneHandleBoundingBoxSchema,\r\n        label: 'Bounding Box',\r\n        optional: true\r\n    },\r\n    index: { // TODO: Remove 'index' from bidirectionalTool since it's useless\r\n        type: Number,\r\n        optional: true\r\n    },\r\n    locked: {\r\n        type: Boolean,\r\n        label: 'Locked',\r\n        optional: true,\r\n        defaultValue: false\r\n    }\r\n});\r\n\r\nexport const MeasurementSchemaTypes = {\r\n    Measurement: Measurement,\r\n    StudyLevelMeasurement: StudyLevelMeasurement,\r\n    SeriesLevelMeasurement: SeriesLevelMeasurement,\r\n    InstanceLevelMeasurement: InstanceLevelMeasurement,\r\n    FrameLevelMeasurement: FrameLevelMeasurement,\r\n    CornerstoneToolMeasurement: CornerstoneToolMeasurement,\r\n    CornerstoneHandleSchema: CornerstoneHandleSchema\r\n};\r\n","import { SimpleSchema } from 'meteor/aldeed:simple-schema';\r\n\r\nexport const schema = new SimpleSchema({\r\n    patientId: {\r\n        type: String,\r\n        label: 'Patient ID',\r\n        optional: true\r\n    },\r\n    timepointId: {\r\n        type: String,\r\n        label: 'Timepoint ID'\r\n    },\r\n    timepointType: {\r\n        type: String,\r\n        label: 'Timepoint Type',\r\n        allowedValues: ['baseline', 'followup'],\r\n        defaultValue: 'baseline',\r\n    },\r\n    isLocked: {\r\n        type: Boolean,\r\n        label: 'Timepoint Locked'\r\n    },\r\n    studyInstanceUids: {\r\n        type: [String],\r\n        label: 'Study Instance Uids',\r\n        defaultValue: []\r\n    },\r\n    earliestDate: {\r\n        type: Date,\r\n        label: 'Earliest Study Date from associated studies',\r\n    },\r\n    latestDate: {\r\n        type: Date,\r\n        label: 'Most recent Study Date from associated studies',\r\n    },\r\n    visitNumber: {\r\n        type: Number,\r\n        label: 'Number of patient\\'s visit',\r\n        optional: true\r\n    },\r\n    studiesData: {\r\n        type: [Object],\r\n        label: 'Studies data to allow lazy loading',\r\n        optional: true,\r\n        blackbox: true\r\n    }\r\n});\r\n"]}
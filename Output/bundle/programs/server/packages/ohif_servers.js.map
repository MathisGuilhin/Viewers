{"version":3,"sources":["meteor://ðŸ’»app/packages/ohif:servers/both/index.js","meteor://ðŸ’»app/packages/ohif:servers/both/base.js","meteor://ðŸ’»app/packages/ohif:servers/both/collections/currentServer.js","meteor://ðŸ’»app/packages/ohif:servers/both/collections/index.js","meteor://ðŸ’»app/packages/ohif:servers/both/collections/servers.js","meteor://ðŸ’»app/packages/ohif:servers/both/lib/applyCloudServerConfig.js","meteor://ðŸ’»app/packages/ohif:servers/both/lib/getCurrentServer.js","meteor://ðŸ’»app/packages/ohif:servers/both/lib/index.js","meteor://ðŸ’»app/packages/ohif:servers/server/index.js","meteor://ðŸ’»app/packages/ohif:servers/server/methods.js","meteor://ðŸ’»app/packages/ohif:servers/server/publications.js","meteor://ðŸ’»app/packages/ohif:servers/server/startup.js","meteor://ðŸ’»app/packages/ohif:servers/server/lib/control.js","meteor://ðŸ’»app/packages/ohif:servers/server/lib/index.js"],"names":["module","watch","require","OHIF","v","servers","collections","export","CurrentServer","Mongo","collectionName","Meteor","settings","public","clientOnly","Collection","_debugName","currentServer","Servers","Session","applyCloudServerConfig","config","set","remove","name","imageRendering","origin","thumbnailRendering","qidoSupportsIncludeField","type","requestOptions","requestFromBrowser","isCloud","serverId","insert","getCurrentServer","findOne","serverConfiguration","_id","methods","serverFind","query","control","find","serverSave","serverSettings","save","serverSetActive","setActive","serverRemove","publish","fields","_","startup","log","info","each","endpoints","serverType","endpoint","server","clone","existingServer","update","$set","resetCurrentServer","writeCallback","error","affected","Error","count","newServer","defaultServiceType","fetch","options","upsert","removeStatus"],"mappings":"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","file":"/packages/ohif_servers.js","sourcesContent":["import './base.js';\r\nimport './collections';\r\nimport './lib';\r\n","import { OHIF } from 'meteor/ohif:core';\r\n\r\nOHIF.servers = {\r\n    collections: {}\r\n};\r\n","import { Mongo } from 'meteor/mongo';\r\nimport { OHIF } from 'meteor/ohif:core';\r\n\r\n// CurrentServer is a single document collection to describe which of the Servers is being used\r\nlet collectionName = 'currentServer';\r\nif (Meteor.settings && Meteor.settings.public && Meteor.settings.public.clientOnly === true) {\r\n    collectionName = null;\r\n}\r\n\r\nconst CurrentServer = new Mongo.Collection(collectionName);\r\nCurrentServer._debugName = 'CurrentServer';\r\nOHIF.servers.collections.currentServer = CurrentServer;\r\n\r\nexport { CurrentServer };\r\n","import { CurrentServer } from './currentServer.js';\r\nimport { Servers } from './servers.js';\r\n\r\nexport { CurrentServer, Servers };\r\n","import { Mongo } from 'meteor/mongo';\r\nimport { OHIF } from 'meteor/ohif:core';\r\n// import { Servers as ServerSchema } from 'meteor/ohif:servers/both/schema/servers.js';\r\n\r\nlet collectionName = 'servers';\r\nif (Meteor.settings && Meteor.settings.public && Meteor.settings.public.clientOnly === true) {\r\n    collectionName = null;\r\n}\r\n\r\n// Servers describe the DICOM servers configurations\r\nconst Servers = new Mongo.Collection(collectionName);\r\n// TODO: Make the Schema match what we are currently sticking into the Collection\r\n//Servers.attachSchema(ServerSchema);\r\nServers._debugName = 'Servers';\r\nOHIF.servers.collections.servers = Servers;\r\n\r\nexport { Servers };\r\n","import { OHIF } from 'meteor/ohif:core';\r\nimport { Session } from 'meteor/session';\r\nimport { Servers, CurrentServer } from 'meteor/ohif:servers/both/collections';\r\n\r\n/**\r\n * Recreates a current server with GCloud config\r\n */\r\nOHIF.servers.applyCloudServerConfig = (config) => {\r\n    Session.set('GCP_HEALTHCARE_CONFIG', config);\r\n    CurrentServer.remove({});\r\n    if (!config)\r\n        return;\r\n    config.name = \"gcs\";\r\n    config.imageRendering = \"wadors\";\r\n    config.origin = \"json\";\r\n    config.thumbnailRendering = \"wadors\";\r\n    config.qidoSupportsIncludeField = false;\r\n    config.type = \"dicomweb\";\r\n    config.requestOptions = {};\r\n    config.requestOptions.requestFromBrowser = true;\r\n    config.origin = 'json';\r\n    config.type = 'dicomWeb';\r\n    config.isCloud = true;\r\n    const serverId = Servers.insert(config);\r\n    CurrentServer.insert({\r\n        serverId\r\n    });\r\n};","import { OHIF } from 'meteor/ohif:core';\r\nimport { Servers, CurrentServer } from 'meteor/ohif:servers/both/collections';\r\n\r\n/**\r\n * Retrieves the current server configuration used to retrieve studies\r\n */\r\nOHIF.servers.getCurrentServer = () => {\r\n    const currentServer = CurrentServer.findOne();\r\n\r\n    if (!currentServer) {\r\n        return;\r\n    }\r\n\r\n    const serverConfiguration = Servers.findOne({ _id: currentServer.serverId });\r\n\r\n    return serverConfiguration;\r\n};\r\n","import './getCurrentServer.js';\r\nimport './applyCloudServerConfig.js';\r\n","import './publications.js';\r\nimport './methods.js';\r\nimport './startup.js';\r\nimport './lib';\r\n","import { Meteor } from 'meteor/meteor';\r\nimport { OHIF } from 'meteor/ohif:core';\r\n\r\nMeteor.methods({\r\n    serverFind: query => OHIF.servers.control.find(query),\r\n    serverSave: serverSettings => OHIF.servers.control.save(serverSettings),\r\n    serverSetActive: serverId => OHIF.servers.control.setActive(serverId),\r\n    serverRemove: serverId => OHIF.servers.control.remove(serverId)\r\n});\r\n","import { Meteor } from 'meteor/meteor';\r\nimport { Servers, CurrentServer } from 'meteor/ohif:servers/both/collections';\r\n\r\n// When publishing Servers Collection, do not publish the requestOptions.headers\r\n// field in case any authentication information is being passed\r\nMeteor.publish('servers', () => Servers.find({}, {\r\n    fields: {\r\n        'requestOptions.headers': 0,\r\n        'requestOptions.auth': 0,\r\n    }\r\n}));\r\n\r\nMeteor.publish('currentServer', () => CurrentServer.find());\r\n","import { Meteor } from 'meteor/meteor';\r\nimport { _ } from 'meteor/underscore';\r\nimport { OHIF } from 'meteor/ohif:core';\r\nimport { Servers } from 'meteor/ohif:servers/both/collections';\r\n\r\n// Check the servers on meteor startup\r\nif (Meteor.settings &&\r\n    Meteor.settings.public &&\r\n    Meteor.settings.public.clientOnly !== true) {\r\n\r\n    Meteor.startup(function() {\r\n        OHIF.log.info('Updating servers information from JSON configuration');\r\n\r\n        _.each(Meteor.settings.servers, function(endpoints, serverType) {\r\n            _.each(endpoints, function(endpoint) {\r\n                const server = _.clone(endpoint);\r\n                server.origin = 'json';\r\n                server.type = serverType;\r\n\r\n                // Try to find a server with the same name/type/origin combination\r\n                const existingServer = Servers.findOne({\r\n                    name: server.name,\r\n                    type: server.type,\r\n                    origin: server.origin\r\n                });\r\n\r\n                // Check if server was already added. Update it if so and insert if not\r\n                if (existingServer) {\r\n                    Servers.update(existingServer._id, { $set: server });\r\n                } else {\r\n                    Servers.insert(server);\r\n                }\r\n            });\r\n        });\r\n\r\n        OHIF.servers.control.resetCurrentServer();\r\n    });\r\n}\r\n","import { Meteor } from 'meteor/meteor';\r\nimport { OHIF } from 'meteor/ohif:core';\r\nimport { Servers, CurrentServer } from 'meteor/ohif:servers/both/collections';\r\n\r\nOHIF.servers.control = {\r\n    writeCallback(error, affected) {\r\n        if (error) {\r\n            throw new Meteor.Error('data-write', error);\r\n        }\r\n    },\r\n\r\n    resetCurrentServer() {\r\n        const currentServer = CurrentServer.findOne();\r\n        if (currentServer && Servers.find({ _id: currentServer.serverId }).count()) {\r\n            return;\r\n        }\r\n\r\n        const newServer = Servers.findOne({\r\n            origin: 'json',\r\n            type: Meteor.settings.defaultServiceType || 'dicomWeb'\r\n        });\r\n\r\n        if (newServer) {\r\n            CurrentServer.remove({});\r\n            CurrentServer.insert({\r\n                serverId: newServer._id\r\n            });\r\n        }\r\n    },\r\n\r\n    find(query) {\r\n        return Servers.find(query).fetch();\r\n    },\r\n\r\n    save(serverSettings) {\r\n        const query = {\r\n            _id: serverSettings._id\r\n        };\r\n        const options = {\r\n            upsert: true\r\n        };\r\n\r\n        if (!serverSettings._id) {\r\n            delete serverSettings._id;\r\n        }\r\n\r\n        return Servers.update(query, serverSettings, options, this.writeCallback);\r\n    },\r\n\r\n    setActive(serverId) {\r\n        CurrentServer.remove({});\r\n        CurrentServer.insert({\r\n            serverId: serverId\r\n        });\r\n    },\r\n\r\n    remove(serverId) {\r\n        const query = {\r\n            _id: serverId\r\n        };\r\n\r\n        const removeStatus = Servers.remove(query, this.writeCallback);\r\n\r\n        OHIF.servers.control.resetCurrentServer();\r\n\r\n        return removeStatus;\r\n    }\r\n};\r\n","import './control.js';\r\n"]}
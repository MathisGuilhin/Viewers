{"version":3,"sources":["meteor://ðŸ’»app/packages/ohif:wadoproxy/both/namespace.js","meteor://ðŸ’»app/packages/ohif:wadoproxy/both/convertURL.js","meteor://ðŸ’»app/packages/ohif:wadoproxy/both/initialize.js","meteor://ðŸ’»app/packages/ohif:wadoproxy/server/routes.js"],"names":["WADOProxy","queryString","module","watch","require","default","v","convertURL","url","serverConfiguration","requestOptions","requestFromBrowser","settings","enabled","serverId","_id","query","stringify","uri","Meteor","OHIF","Object","assign","utils","absoluteUrl","proxy","Router","Servers","http","https","now","doAuth","authenticateUser","user","handleRequest","request","response","params","start","writeHead","end","authenticationTime","server","findOne","requestOpt","wadoUrl","logRequests","console","log","logTiming","time","parsed","parse","options","headers","method","hostname","path","requester","protocol","allowUnauthorizedAgent","Agent","rejectUnauthorized","agent","port","keys","forEach","entry","value","auth","prepRequestTime","proxyRequest","proxyResponse","proxyReqTime","totalProxyTime","serverTimingHeaders","replace","statusCode","timeEnd","pipe","on","error","message","route","where"],"mappings":"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","file":"/packages/ohif_wadoproxy.js","sourcesContent":["WADOProxy = {};\r\n","import queryString from 'query-string';\r\n\r\nWADOProxy.convertURL = (url, serverConfiguration) => {\r\n    if (!url) {\r\n        return null;\r\n    }\r\n\r\n    if (serverConfiguration.requestOptions &&\r\n        serverConfiguration.requestOptions.requestFromBrowser === true) {\r\n        return url;\r\n    }\r\n\r\n    const { settings } = WADOProxy;\r\n    if (!settings.enabled) {\r\n        return url;\r\n    }\r\n\r\n    const serverId = serverConfiguration._id;\r\n    const query = queryString.stringify({url, serverId});\r\n\r\n    return `${settings.uri}?${query}`;\r\n}\r\n","import { Meteor } from 'meteor/meteor';\r\nimport { OHIF } from 'meteor/ohif:core';\r\n\r\nWADOProxy.settings = Object.assign({\r\n    uri : OHIF.utils.absoluteUrl(\"/__wado_proxy\"),\r\n}, (Meteor.settings && Meteor.settings.proxy) ? Meteor.settings.proxy : {});\r\n","import { Meteor } from 'meteor/meteor';\r\nimport { Router } from 'meteor/clinical:router';\r\nimport { OHIF } from 'meteor/ohif:core';\r\nimport { Servers } from 'meteor/ohif:servers/both/collections';\r\n\r\nconst url = require('url');\r\nconst http = require('http');\r\nconst https = require('https');\r\nconst now = require('performance-now');\r\n\r\n// The WADO Proxy can perform user authentication if desired.\r\n// In order to use this, create a function to override\r\n// OHIF.user.authenticateUser(request), which returns a Boolean.\r\nlet doAuth = false;\r\nlet authenticateUser = null;\r\n\r\nif (OHIF.user &&\r\n    OHIF.user.authenticateUser) {\r\n    doAuth = true;\r\n    authenticateUser = OHIF.user.authenticateUser;\r\n}\r\n\r\nconst handleRequest = function() {\r\n  const request = this.request;\r\n  const response = this.response;\r\n  const params = this.params;\r\n\r\n  let start = now();\r\n  let user;\r\n  if (doAuth) {\r\n      user = authenticateUser(request);\r\n      if (!user) {\r\n          response.writeHead(401);\r\n          response.end('Error: You must be logged in to perform this action.\\n');\r\n          return;\r\n      }\r\n  }\r\n\r\n  let end = now();\r\n  const authenticationTime = end - start;\r\n\r\n  start = now();\r\n\r\n  const server = Servers.findOne(params.query.serverId);\r\n  if (!server) {\r\n      response.writeHead(500);\r\n      response.end('Error: No Server with the specified Server ID was found.\\n');\r\n      return;\r\n  }\r\n\r\n  const requestOpt = server.requestOptions;\r\n\r\n  // If no Web Access to DICOM Objects (WADO) Service URL is provided\r\n  // return an error for the request.\r\n  const wadoUrl = params.query.url;\r\n  if (!wadoUrl) {\r\n      response.writeHead(500);\r\n      response.end('Error: No WADO URL was provided.\\n');\r\n      return;\r\n  }\r\n\r\n  if (requestOpt.logRequests) {\r\n      console.log(request.url);\r\n  }\r\n\r\n  start = now();\r\n  if (requestOpt.logTiming) {\r\n      console.time(request.url);\r\n  }\r\n\r\n  // Use Node's URL parse to decode the query URL\r\n  const parsed = url.parse(wadoUrl);\r\n\r\n  // Create an object to hold the information required\r\n  // for the request to the PACS.\r\n  let options = {\r\n      headers: {},\r\n      method: request.method,\r\n      hostname: parsed.hostname,\r\n      path: parsed.path\r\n  };\r\n\r\n  let requester;\r\n  if (parsed.protocol === 'https:') {\r\n      requester = https.request;\r\n\r\n      const allowUnauthorizedAgent = new https.Agent({ rejectUnauthorized: false });\r\n      options.agent = allowUnauthorizedAgent;\r\n  } else {\r\n      requester = http.request;\r\n  }\r\n\r\n  if (parsed.port) {\r\n      options.port = parsed.port;\r\n  }\r\n\r\n  Object.keys(request.headers).forEach(entry => {\r\n      const value = request.headers[entry];\r\n      if (entry) {\r\n          options.headers[entry] = value;\r\n      }\r\n  });\r\n\r\n  // Retrieve the authorization user:password string for the PACS,\r\n  // if one is required, and include it in the request to the PACS.\r\n  if (requestOpt.auth) {\r\n      options.auth = requestOpt.auth;\r\n  }\r\n\r\n  end = now();\r\n  const prepRequestTime = end - start;\r\n\r\n  // Use Node's HTTP API to send a request to the PACS\r\n  const proxyRequest = requester(options, proxyResponse => {\r\n      // When we receive data from the PACS, stream it as the\r\n      // response to the original request.\r\n      // console.log(`Got response: ${proxyResponse.statusCode}`);\r\n      end = now();\r\n      const proxyReqTime = end - start;\r\n      const totalProxyTime = authenticationTime + prepRequestTime + proxyReqTime;\r\n      const serverTimingHeaders = `\r\n        auth;dur=${authenticationTime};desc=\"Authenticate User\";,\r\n\t\tprep-req;dur=${prepRequestTime};desc=\"Prepare Request Headers\",\r\n\t    proxy-req;dur=${proxyReqTime};desc=\"Request to WADO server\",\r\n        total-proxy;dur=${totalProxyTime};desc=\"Total\"\r\n        `.replace(/\\n/g, '')\r\n\r\n      proxyResponse.headers['Server-Timing'] = serverTimingHeaders;\r\n\r\n      response.writeHead(proxyResponse.statusCode, proxyResponse.headers);\r\n\r\n      if (requestOpt.logTiming) {\r\n          console.timeEnd(request.url);\r\n      }\r\n\r\n      return proxyResponse.pipe(response, { end: true });\r\n  });\r\n\r\n  // If our request to the PACS fails, log the error message\r\n  proxyRequest.on('error', error => {\r\n      end = now();\r\n      const proxyReqTime = end - start;\r\n      const totalProxyTime = authenticationTime + prepRequestTime + proxyReqTime;\r\n      console.timeEnd(request.url);\r\n\r\n      const serverTimingHeaders = {\r\n          'Server-Timing': `\r\n              auth;dur=${authenticationTime};desc=\"Authenticate User\";,\r\n              prep-req;dur=${prepRequestTime};desc=\"Prepare Request Headers\",\r\n              proxy-req;dur=${proxyReqTime};desc=\"Request to WADO server\",\r\n              total-proxy;dur=${totalProxyTime};desc=\"Total\"\r\n          `.replace(/\\n/g, '')\r\n      };\r\n\r\n      response.writeHead(500, serverTimingHeaders);\r\n      response.end(`Error: Problem with request to PACS: ${error.message}\\n`);\r\n  });\r\n\r\n  // Stream the original request information into the request\r\n  // to the PACS\r\n  request.pipe(proxyRequest);\r\n}\r\n\r\n// Setup a Route using Iron Router to avoid Cross-origin resource sharing\r\n// (CORS) errors. We only handle this route on the Server.\r\nRouter.route(WADOProxy.settings.uri.replace(OHIF.utils.absoluteUrl(), ''), handleRequest, { where: 'server' });\r\n"]}